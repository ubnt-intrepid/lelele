// ref: https://github.com/gfngfn/SATySFi/blob/v0.0.9/src/frontend/parser.mly

@prec { assoc = left } prec_binop_bar;
@prec { assoc = left } prec_binop_amp;
@prec { assoc = right } prec_binop_cmp;
@prec { assoc = right } prec_binop_hat;
@prec { assoc = right } prec_binop_add;
@prec { assoc = left } prec_binop_sub;
@prec { assoc = right } prec_binop_mul;

@terminal VAR;
@terminal HORZ_CMD;
@terminal VERT_CMD;
@terminal HORZ_MACRO;
@terminal VERT_MACRO;
@terminal MATH_CMD;
@terminal VAR_WITH_MOD;
@terminal HORZ_CMD_WITH_MOD;
@terminal VERT_CMD_WITH_MOD;
@terminal MATH_CMD_WITH_MOD;
@terminal VAR_IN_HORZ;
@terminal VAR_IN_VERT;
@terminal VAR_IN_MATH;
@terminal TYPE_VAR;
@terminal CONSTRUCTOR;
@terminal INT_CONST;
@terminal FLOAT_CONST;
@terminal LENGTH_CONST;
@terminal CHAR;
@terminal LITERAL;
@terminal POSITIONED_LITERAL;
@terminal SPACE BREAK;
@terminal MATCHARS;
@terminal PRIMES;
@terminal SUBSCRIPT SUPERSCRIPT;
@terminal LAMBDA ARROW COMMAND;
@terminal LET_REC LET_NONREC DEF_EQ LET_AND IN OPEN;
@terminal OPEN_MODULE;
@terminal MODULE STRUCT END DIRECT SIG VAL CONSTRAINT;
@terminal TYPE OF MATCH WITH BAR WILDCARD WHEN AS COLON;
@terminal LET_MUTABLE OVERWRITE_EQ;
@terminal LET_HORZ LET_VERT LET_MATH;
@terminal IF THEN ELSE;
@terminal UNOP_EXCLAM;
@terminal BEFORE LNOT EXACT_AMP EXACT_TILDE;
@terminal LPAREN RPAREN;
@terminal BVERTGRP EVERTGRP;
@terminal BHORZGRP EHORZGRP;
@terminal BMATHGRP EMATHGRP;
@terminal BPATH EPATH PATHLINE PATHCURVE CONTROLS CYCLE;
@terminal TRUE FALSE;
@terminal SEP ENDACTIVE COMMA;
@terminal BLIST LISTPUNCT ELIST BRECORD ERECORD ACCESS;
@terminal WHILE DO;
@terminal HORZCMDTYPE VERTCMDTYPE MATHCMDTYPE;
@terminal OPTIONAL OMISSION OPTIONALTYPE OPTIONALARROW;
// @terminal NEWGLOBALHASH OVERWRITEGLOBALHASH RENEWGLOBALHASH;
@terminal ITEM;
@terminal HEADER_REQUIRE HEADER_IMPORT;
@terminal HEADER_STAGE0 HEADER_STAGE1 HEADER_PERSISTENT0;

@terminal { prec = prec_binop_bar } BINOP_BAR;
@terminal { prec = prec_binop_amp } BINOP_AMP;
@terminal { prec = prec_binop_cmp } BINOP_EQ BINOP_GT BINOP_LT;
@terminal { prec = prec_binop_hat } BINOP_HAT CONS;
@terminal { prec = prec_binop_add } BINOP_PLUS;
@terminal { prec = prec_binop_sub } BINOP_MINUS EXACT_MINUS;
@terminal { prec = prec_binop_mul } BINOP_TIMES EXACT_TIMES BINOP_DIVIDES MOD;

@nonterminal Header;
@nonterminal HeaderElem;

@nonterminal Main;
@nonterminal NxToplevel;
@nonterminal NxTopSubSeq;
@nonterminal NxSigOpt;
@nonterminal NxSigElems;
@nonterminal NxSigElem;
@nonterminal Constraints;
@nonterminal Constraint;
@nonterminal NxStruct;

@nonterminal KxTop;
@nonterminal TypeVarList;
@nonterminal TxFunc TxFuncOpts TxProd TxApp TxAppre TxBot;
@nonterminal BinOp;

@nonterminal NxRecDec NxNonRecDec NxLet NxHorzDec NxVertDec NxMathDec NxVariantDec;
@nonterminal NxHorzMacroDec NxVertMacroDec;

@nonterminal Stage;
@nonterminal NxWhl;
@nonterminal NxIf;
@nonterminal NxBfr;
@nonterminal NxLambda;
@nonterminal NxOp;
@nonterminal NxApp;
@nonterminal NxBot;

@nonterminal Arg ArgList ArgListNonempty;
@nonterminal ArgPats;
@nonterminal MacroParam MacroParamList;

@nonterminal NonRecDecArgPart;
@nonterminal RecDecArgPart;

@nonterminal PatBot PatBotList PatBotListNonempty;

@nonterminal NxRecDecSub;
@nonterminal NxRecDecPar;

@nonterminal NxTypeEqListNonemptyLetAnd;
@nonterminal NxTypeEq;

@nonterminal Variant Variants;
@nonterminal TxList TxListElem;
@nonterminal TxRecord TxRecordElem;

@nonterminal Pat Pats PatAs PatTr PatTuple PatList;

@nonterminal NxLetSub;
@nonterminal NxUnsub;
@nonterminal HCmd MCmd;
@nonterminal Tuple;
@nonterminal SxSep VxBlock NxListSynt NxRecordSynt;
@nonterminal Path MathBlock;
@nonterminal NxList;
@nonterminal NxRecordField;

@nonterminal SxList SxBlock SxBlockTerminated SxItem SxItems;
@nonterminal MathList MathMain MathMainTerminated MathTop MathBot MathGroup MathArg MathArgList;
@nonterminal Ih IhCmd IhText IhChar ;

@nonterminal NArg;
@nonterminal NArgList MacroArgs;
@nonterminal SArgs SArg SArgListNonempty;

@nonterminal MacroNArgs MacroNArg;
@nonterminal VCmd;
@nonterminal VxBot;

@start Main;

//-----------------------------------------------------------------------

@rule Header :=
    | @empty
    | Header HeaderElem
    ;

@rule HeaderElem :=
    | HEADER_REQUIRE
    | HEADER_IMPORT
    ;

@rule Main :=
    | Stage Header NxToplevel
    | Stage Header NxWhl
    ;

@rule ArgList :=
    | @empty
    | Arg ArgList
    ;

@rule ArgListNonempty :=
    | Arg
    | Arg ArgList
    ;

@rule Stage :=
    | @empty
    | HEADER_STAGE0
    | HEADER_STAGE1
    | HEADER_PERSISTENT0
    ;

@rule NxToplevel :=
    | LET_REC NxRecDec NxTopSubSeq
    | LET_NONREC NxNonRecDec NxTopSubSeq
    | LET_MUTABLE VAR OVERWRITE_EQ NxLet NxTopSubSeq
    | LET_HORZ NxHorzDec NxTopSubSeq
    | LET_VERT NxVertDec NxTopSubSeq
    | LET_MATH NxMathDec NxTopSubSeq
    | TYPE NxVariantDec NxTopSubSeq
    | MODULE CONSTRUCTOR NxSigOpt DEF_EQ STRUCT NxStruct NxTopSubSeq
    | OPEN CONSTRUCTOR NxTopSubSeq
    | LET_HORZ NxHorzMacroDec NxTopSubSeq
    | LET_VERT NxVertMacroDec NxTopSubSeq
    ;

@rule NxTopSubSeq :=
    | NxToplevel
    | @empty
    | IN NxLet
    ;

@rule NxSigOpt :=
    | @empty
    | COLON SIG NxSigElems END
    ;

@rule NxSigElems :=
    | @empty
    | NxSigElem NxSigElems
    ;

@rule NxSigElem :=
    | TYPE TypeVarList VAR Constraints
    | VAL VAR COLON TxFunc Constraints
    | VAL LPAREN BinOp RPAREN COLON TxFunc Constraints
    | VAL HORZ_CMD COLON TxFunc Constraints
    | VAL VERT_CMD COLON TxFunc Constraints
    | DIRECT HORZ_CMD COLON TxFunc Constraints
    | DIRECT VERT_CMD COLON TxFunc Constraints
    ;

@rule Constraints :=
    | @empty
    | Constraint Constraints
    ;

@rule Constraint := CONSTRAINT TYPE_VAR CONS KxTop;

@rule NxStruct :=
    | END
    | LET_REC NxRecDec NxStruct
    | LET_NONREC NxNonRecDec NxStruct
    | LET_MUTABLE VAR OVERWRITE_EQ NxLet NxStruct
    | LET_HORZ NxHorzDec NxStruct
    | LET_VERT NxVertDec NxStruct
    | LET_MATH NxMathDec NxStruct
    | TYPE NxVariantDec NxStruct
    | MODULE CONSTRUCTOR NxSigOpt DEF_EQ STRUCT NxStruct NxStruct
    | OPEN CONSTRUCTOR NxStruct
    ;

@rule NxHorzDec :=
    | VAR HORZ_CMD ArgList DEF_EQ NxLet
    | HORZ_CMD ArgPats DEF_EQ NxLet
    ;

@rule NxVertDec :=
    | VAR VERT_CMD ArgList DEF_EQ NxLet
    | VERT_CMD ArgPats DEF_EQ NxLet
    ;

@rule NxMathDec :=
    | HORZ_CMD ArgList DEF_EQ NxLet
    ;

@rule MacroParamList := @empty | MacroParam MacroParamList;

@rule NxHorzMacroDec :=
    | HORZ_MACRO MacroParamList DEF_EQ NxLet
    ;

@rule NxVertMacroDec :=
    | VERT_MACRO MacroParamList DEF_EQ NxLet
    ;

@rule MacroParam :=
    | VAR
    | EXACT_TILDE VAR
    ;

@rule NonRecDecArgPart :=
    | COLON TxFunc
    | COLON TxFunc BAR ArgListNonempty
    ;

@rule RecDecArgPart :=
    | COLON TxFunc
    | COLON TxFunc BAR PatBotListNonempty
    | BAR PatBotListNonempty
    | ArgPats
    ;

@rule Arg :=
    | PatBot
    | OPTIONAL VAR
    | OPTIONAL LPAREN BinOp RPAREN
    ;

@rule PatBotList :=
    | @empty
    | PatBot PatBotList
    ;

@rule PatBotListNonempty :=
    | PatBot
    | PatBot PatBotListNonempty
    ;

@rule NxRecDecSub :=
    | LET_AND NxRecDec
    | @empty
    ;


@rule NxRecDec :=
    | VAR RecDecArgPart DEF_EQ NxLet NxRecDecSub
    | LPAREN BinOp RPAREN RecDecArgPart DEF_EQ NxLet NxRecDecSub
    | VAR RecDecArgPart DEF_EQ NxLet BAR NxRecDecPar NxRecDecSub
    | LPAREN BinOp RPAREN RecDecArgPart DEF_EQ NxLet BAR NxRecDecPar NxRecDecSub
    ;

@rule NxRecDecPar :=
    | ArgPats DEF_EQ NxLet BAR NxRecDecPar
    | ArgPats DEF_EQ NxLet
    ;

@rule NxNonRecDec := PatBot NonRecDecArgPart DEF_EQ NxLet ;

@rule NxVariantDec := NxTypeEqListNonemptyLetAnd;

@rule NxTypeEqListNonemptyLetAnd :=
    | NxTypeEq
    | NxTypeEq LET_AND NxTypeEqListNonemptyLetAnd
    ;

@rule TypeVarList := @empty | TYPE_VAR TypeVarList ;

@rule NxTypeEq :=
    | TypeVarList VAR DEF_EQ BAR  Variants Constraints
    | TypeVarList VAR DEF_EQ /**/ Variants Constraints
    | TypeVarList VAR DEF_EQ TxFunc Constraints
    ;

@rule KxTop :=
    | BRECORD TxRecord ERECORD
    ;

@rule NxLet :=
    | MATCH NxLet WITH BAR  Pats
    | MATCH NxLet WITH /**/ Pats
    | NxLetSub
    ;

@rule NxLetSub :=
    | LET_REC NxRecDec IN NxLet
    | LET_NONREC NxNonRecDec IN NxLet
    | LET_MUTABLE VAR OVERWRITE_EQ NxLet IN NxLet
    | LET_MATH NxMathDec IN NxLet
    | OPEN CONSTRUCTOR IN NxLet
    | NxWhl
    ;

@rule NxWhl :=
    | WHILE NxLet NxWhl
    | NxIf
    ;

@rule NxIf :=
    | IF NxLet THEN NxLet ELSE NxLet
    | NxBfr
    ;

@rule NxBfr :=
    | NxLambda BEFORE NxBfr
    | NxLambda
    ;

@rule NxLambda :=
    | VAR OVERWRITE_EQ NxOp
    | LAMBDA ArgPats ARROW NxOp
    | NxOp
    ;

@rule ArgPats := PatBotList ;

@rule NxOp :=
    | NxOp BINOP_BAR NxOp
    | NxOp BINOP_AMP NxOp
    | NxOp BINOP_EQ NxOp
    | NxOp BINOP_GT NxOp
    | NxOp BINOP_LT NxOp
    | NxOp BINOP_HAT NxOp
    | NxOp BINOP_PLUS NxOp
    | NxOp BINOP_MINUS NxOp
    | NxOp BINOP_TIMES NxOp
    | NxOp BINOP_DIVIDES NxOp
    | NxOp CONS NxOp
    | NxOp EXACT_MINUS NxOp
    | NxOp EXACT_TIMES NxOp
    | NxOp MOD NxOp
    | EXACT_MINUS NxApp
    | LNOT NxApp
    | CONSTRUCTOR NxBot
    | CONSTRUCTOR
    | NxApp
    ;

@rule NxApp :=
    | NxApp NxUnsub
    | NxApp CONSTRUCTOR
    | COMMAND HCmd
    | NxApp OPTIONAL NxUnsub
    | NxApp OMISSION
    | NxUnsub
    ;

@rule NxUnsub :=
    | UNOP_EXCLAM NxBot
    | EXACT_AMP NxBot
    | EXACT_TILDE NxBot
    | NxBot
    ;

@rule NxBot :=
    | NxBot ACCESS VAR
    | VAR
    | VAR_WITH_MOD
    | INT_CONST
    | FLOAT_CONST
    | LENGTH_CONST
    | TRUE
    | FALSE
    | LPAREN RPAREN
    | LPAREN NxLet RPAREN
    | LPAREN NxLet COMMA Tuple RPAREN
    | BHORZGRP SxSep EHORZGRP
    | BVERTGRP VxBlock EVERTGRP
    | LITERAL
    | POSITIONED_LITERAL
    | NxListSynt
    | LPAREN BinOp RPAREN
    | NxRecordSynt
    | BPATH Path EPATH
    | BMATHGRP MathBlock EMATHGRP
    | OPEN_MODULE NxLet RPAREN
    ;

@rule NxListSynt :=
    | BLIST ELIST
    | BLIST NxList ELIST
    ;

@nonterminal NxRecord;

@rule NxRecordSynt :=
    | BRECORD ERECORD
    | BRECORD NxRecord ERECORD
    | BRECORD NxBot WITH NxRecord ERECORD
    ;

@nonterminal PathSub PathComp PathCompCycle;

@rule Path := | NxBot PathSub ;

@rule PathSub :=
    | PathComp PathSub
    | PathCompCycle
    | @empty
    ;

@rule PathComp :=
    | PATHLINE NxBot
    | PATHCURVE CONTROLS NxBot LET_AND NxBot PATHCURVE NxBot
    ;

@rule PathCompCycle :=
    | PATHLINE CYCLE
    | PATHCURVE CONTROLS NxBot LET_AND NxBot PATHCURVE CYCLE
    ;


@rule NxRecord :=
    | NxRecordField
    | NxRecordField LISTPUNCT
    | NxRecordField LISTPUNCT NxRecord
    ;

@rule NxRecordField :=
    | VAR DEF_EQ NxLet
    ;

@rule NxList :=
    | NxLet
    | NxLet LISTPUNCT
    | NxLet LISTPUNCT NxList
    ;

@rule Variants :=
    | Variant
    | Variant BAR Variants
    ;

@rule Variant :=
    | CONSTRUCTOR OF TxFunc
    | CONSTRUCTOR
    ;

@rule TxFunc :=
    | TxFuncOpts ARROW TxFunc
    | TxProd
    ;

@rule TxFuncOpts :=
    | TxProd OPTIONALARROW TxFuncOpts
    | TxProd
    ;

@rule TxProd :=
    | TxAppre
    | TxAppre EXACT_TIMES TxProd
    ;

@rule TxAppre :=
    | TxApp
    | BLIST TxList ELIST HORZCMDTYPE
    | BLIST TxList ELIST VERTCMDTYPE
    | BLIST TxList ELIST MATHCMDTYPE
    | LPAREN TxFunc RPAREN
    | BRECORD TxRecord ERECORD
    | TYPE_VAR
    ;

@rule TxApp :=
    | TxBot TxApp
    | LPAREN TxFunc RPAREN TxApp
    | TYPE_VAR TxApp
    | TxBot
    ;

@rule TxBot :=
    | VAR
    | VAR_WITH_MOD
    ;

@rule TxList :=
    | @empty
    | TxListElem
    | TxListElem LISTPUNCT TxList
    ;

@rule TxListElem :=
    | TxFunc
    | TxAppre OPTIONALTYPE
    ;

@rule TxRecord :=
    | TxRecordElem
    | TxRecordElem LISTPUNCT
    | TxRecordElem LISTPUNCT TxRecord
    ;

@rule TxRecordElem :=
    | VAR COLON TxFunc
    ;

@rule Tuple :=
    | NxLet
    | NxLet COMMA Tuple
    ;

@rule Pats :=
    //| brs=separated_nonempty_list(BAR, pat) {
    | Pat
    | Pat BAR Pats
    ;

@rule Pat :=
    | PatAs ARROW NxLetSub
    | PatAs WHEN NxLetSub ARROW NxLetSub
    ;

@rule PatAs :=
    | PatTr AS VAR
    | PatTr
    ;

@rule PatTr :=
    | PatBot CONS PatTr
    | CONSTRUCTOR PatBot
    | CONSTRUCTOR
    | PatBot
    ;

@rule PatBot :=
    | INT_CONST
    | TRUE
    | FALSE
    | LPAREN RPAREN
    | WILDCARD
    | VAR
    | LPAREN BinOp RPAREN
    | LITERAL
    | BLIST ELIST
    | BLIST PatList ELIST
    | LPAREN PatAs RPAREN
    | LPAREN PatAs COMMA PatTuple RPAREN
    ;

@rule PatTuple :=
    | PatAs
    | PatAs COMMA PatTuple
    ;

@rule PatList :=
    | PatAs
    | PatAs LISTPUNCT
    | PatAs LISTPUNCT PatList
    ;

@rule BinOp :=
    | UNOP_EXCLAM
    | BINOP_TIMES
    | BINOP_DIVIDES
    | BINOP_HAT
    | BINOP_EQ
    | BINOP_GT
    | BINOP_LT
    | BINOP_AMP
    | BINOP_BAR
    | BINOP_PLUS
    | BINOP_MINUS
    | EXACT_TIMES
    | EXACT_MINUS
    | MOD
    | BEFORE
    | LNOT
    ;

@rule SxSep :=
    | SxList
    | SxBlock
    | SxItems
    ;

@rule SxItems :=
    | SxItem
    | SxItem SxItems
    ;

@rule SxList :=
    | @empty
    | SxBlockTerminated SxList
    ;

@rule SxBlockTerminated := SxBlock SEP;

@rule SxItem :=
    | ITEM SxBlock
    ;


@rule HCmd :=
    | HORZ_CMD
    | HORZ_CMD_WITH_MOD
    ;

@rule MCmd :=
    | MATH_CMD
    | MATH_CMD_WITH_MOD
    ;

@rule MathBlock :=
    | SEP MathList
    | MathMain
    ;

@rule MathList :=
    | @empty
    | MathMainTerminated MathList
    ;

@rule MathMainTerminated := | MathMain SEP ;

@rule MathMain :=
    | @empty
    | MathTop MathMain
    ;

@rule MathTop :=
    | MathBot
    | MathBot SUPERSCRIPT MathGroup
    | MathBot SUBSCRIPT MathGroup
    | MathBot SUBSCRIPT MathGroup SUPERSCRIPT MathGroup
    | MathBot SUPERSCRIPT MathGroup SUBSCRIPT MathGroup
    | MathBot PRIMES
    | MathBot PRIMES SUPERSCRIPT MathGroup
    | MathBot PRIMES SUBSCRIPT MathGroup
    | MathBot PRIMES SUBSCRIPT MathGroup SUPERSCRIPT MathGroup
    | MathBot PRIMES SUPERSCRIPT MathGroup SUBSCRIPT MathGroup
    ;

@rule MathGroup :=
    | BMATHGRP MathMain EMATHGRP
    | MathBot
    ;

@rule MathBot :=
    | MATCHARS
    | MCmd MathArgList
    | VAR_IN_MATH
    ;

@rule MathArgList :=
    | @empty
    | MathArg MathArgList
    ;

@rule MathArg :=
    | BMATHGRP MathGroup EMATHGRP
    | BHORZGRP SxSep EHORZGRP
    | BVERTGRP VxBlock EVERTGRP
    | OPTIONAL BMATHGRP MathBlock EMATHGRP
    | OPTIONAL BHORZGRP SxSep EHORZGRP
    | OPTIONAL BVERTGRP VxBlock EVERTGRP
    | NArg
    ;

@rule SxBlock := Ih ;

@rule Ih :=
    | IhText
    | IhText IhCmd Ih
    | IhCmd Ih
    | @empty
    ;

@rule NArgList :=
    | @empty
    | NArg NArgList
    ;

@rule IhCmd :=
    | HORZ_MACRO MacroArgs
    | HCmd NArgList SArgs
    | BMATHGRP MathBlock EMATHGRP
    | LITERAL
    | VAR_IN_HORZ ENDACTIVE
    ;

@rule IhText :=
    | IhChar
    | IhChar IhText
    ;

@rule IhChar :=
    | CHAR
    | SPACE
    | BREAK
    ;

@rule MacroArgs := MacroNArgs ENDACTIVE ;

@rule MacroNArgs :=
    | @empty
    | MacroNArg MacroNArgs
    ;

@rule MacroNArg :=
    | LPAREN NxBot RPAREN
    | EXACT_TILDE LPAREN NxBot RPAREN
    ;

@rule NArg :=
    | LPAREN NxLet RPAREN
    | LPAREN RPAREN
    | NxRecordSynt
    | NxListSynt
    | OPTIONAL LPAREN NxLet RPAREN
    | OPTIONAL LPAREN RPAREN
    | OPTIONAL NxRecordSynt
    | OPTIONAL NxListSynt
    | OMISSION
    ;

@rule SArgs :=
    | ENDACTIVE
    | SArgListNonempty
    ;

@rule SArgListNonempty :=
    | SArg
    | SArg SArgListNonempty
    ;

@rule SArg :=
    | BVERTGRP VxBlock EVERTGRP
    | BHORZGRP SxSep EHORZGRP
    ;

@rule VCmd :=
    | VERT_CMD
    | VERT_CMD_WITH_MOD
    ;

@rule VxBlock :=
    | @empty
    | VxBot VxBlock
    ;

@rule VxBot :=
    | VCmd NArgList SArgs
    | VAR_IN_VERT ENDACTIVE
    | VERT_MACRO MacroArgs
    ;