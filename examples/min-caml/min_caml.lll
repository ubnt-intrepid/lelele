// imported from: https://github.com/esumii/min-caml/blob/master/parser.mly

@prec { assoc = none } prec_in;
@prec { assoc = right } prec_let;
@prec { assoc = right } prec_semicolon;
@prec { assoc = right } prec_if;
@prec { assoc = right } prec_less_minus;
@prec { assoc = none } prec_tuple;
@prec { assoc = left } prec_comma;
@prec { assoc = left } prec_cmp;
@prec { assoc = left } prec_add;
@prec { assoc = left } prec_mul;
@prec { assoc = right } prec_neg;
@prec { assoc = left } prec_app;
@prec { assoc = left } prec_dot;

@terminal LPAREN RPAREN TRUE FALSE NOT IF THEN ELSE LET REC ARRAY_MAKE;
@terminal INTEGER FLOAT IDENT;
@terminal { prec = prec_add } PLUS PLUS_DOT MINUS MINUS_DOT;
@terminal { prec = prec_mul } STAR_DOT SLASH_DOT;
@terminal { prec = prec_cmp } EQUAL LESS_GREATER LESS GREATER LESS_EQUAL GREATER_EQUAL;
@terminal { prec = prec_in } IN;
@terminal { prec = prec_dot } DOT;
@terminal { prec = prec_less_minus } LESS_MINUS;
@terminal { prec = prec_comma } COMMA;
@terminal { prec = prec_semicolon } SEMICOLON;

@start Expr;

@rule SimpleExpr :=
    | LPAREN Expr RPAREN
    | LPAREN RPAREN
    | TRUE
    | FALSE
    | INTEGER
    | FLOAT
    | IDENT
    | SimpleExpr DOT LPAREN Expr RPAREN
    ;

@rule Expr :=
    | SimpleExpr
    | @{ prec = prec_app } NOT Expr
    | @{ prec = prec_neg } MINUS Expr
    | @{ prec = prec_neg } MINUS_DOT Expr
    | Expr PLUS Expr
    | Expr MINUS Expr
    | Expr PLUS_DOT Expr
    | Expr MINUS_DOT Expr
    | Expr STAR_DOT Expr
    | Expr SLASH_DOT Expr
    | Expr EQUAL Expr
    | Expr LESS_GREATER Expr
    | Expr LESS Expr
    | Expr GREATER Expr
    | Expr LESS_EQUAL Expr
    | Expr GREATER_EQUAL Expr
    | @{ prec = prec_if } IF Expr THEN Expr ELSE Expr
    | @{ prec = prec_let } LET IDENT EQUAL Expr IN Expr
    | @{ prec = prec_let } LET REC FunDef IN Expr
    | LET LPAREN Pat RPAREN EQUAL Expr IN Expr
    | @{ prec = prec_app } SimpleExpr ActualArgs
    | @{ prec = prec_tuple } Elems
    | SimpleExpr DOT LPAREN Expr RPAREN LESS_MINUS Expr
    | Expr SEMICOLON Expr
    | @{ prec = prec_app } ARRAY_MAKE SimpleExpr SimpleExpr
    ;

@rule FunDef := IDENT FormalArgs EQUAL Expr ;

@rule FormalArgs :=
    | IDENT FormalArgs
    | IDENT
    ;

@rule ActualArgs :=
    | @{ prec = prec_app } ActualArgs SimpleExpr
    | @{ prec = prec_app } SimpleExpr
    ;

@rule Elems :=
    | Elems COMMA Expr
    | Expr COMMA Expr
    ;

@rule Pat :=
    | Pat COMMA IDENT
    | IDENT COMMA IDENT
    ;
