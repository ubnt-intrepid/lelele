// This file is automatically generated by lelele.
use lelele_runtime::_private as lelele;
/// The type to identify DFA state nodes.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NodeID {
    N0,
    N1,
    N2,
    N3,
    N4,
    N5,
    N6,
    N7,
    N8,
    N9,
    N10,
    N11,
    N12,
    N13,
    N14,
    N15,
    N16,
    N17,
    N18,
    N19,
    N20,
    N21,
    N22,
    N23,
    N24,
    N25,
    N26,
    N27,
    N28,
    N29,
    N30,
    N31,
    N32,
    N33,
    N34,
    N35,
    N36,
    N37,
    N38,
    N39,
    N40,
    N41,
    N42,
    N43,
    N44,
    N45,
    N46,
    N47,
}
/// The type to identify terminal or nonterminal symbols used in generated DFA.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[allow(non_camel_case_types)]
pub enum TokenID {
    /// Terminal `LBRACKET`.
    LBRACKET,
    /// Terminal `RBRACKET`.
    RBRACKET,
    /// Terminal `AT_LBRACKET`.
    AT_LBRACKET,
    /// Terminal `COLON_EQ`.
    COLON_EQ,
    /// Terminal `EQ`.
    EQ,
    /// Terminal `COMMA`.
    COMMA,
    /// Terminal `SEMICOLON`.
    SEMICOLON,
    /// Terminal `VERT_BAR`.
    VERT_BAR,
    /// Terminal `KW_TERMINAL`.
    KW_TERMINAL,
    /// Terminal `KW_NONTERMINAL`.
    KW_NONTERMINAL,
    /// Terminal `KW_START`.
    KW_START,
    /// Terminal `KW_RULE`.
    KW_RULE,
    /// Terminal `KW_PREC`.
    KW_PREC,
    /// Terminal `KW_EMPTY`.
    KW_EMPTY,
    /// Terminal `KW_ERROR`.
    KW_ERROR,
    /// Terminal `IDENT`.
    IDENT,
}
impl lelele::Token<TokenID> for TokenID {
    #[inline]
    fn to_index(&self) -> TokenID {
        *self
    }
}
/// The type to identify nonterminal symbols used in generated DFA.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Symbol {
    /// Nonterminal `Grammar`.
    Grammar,
    /// Nonterminal `Stmts`.
    Stmts,
    /// Nonterminal `Stmt`.
    Stmt,
    /// Nonterminal `Idents`.
    Idents,
    /// Nonterminal `Configs`.
    Configs,
    /// Nonterminal `Productions`.
    Productions,
    /// Nonterminal `Production`.
    Production,
    /// Nonterminal `ProductionElems`.
    ProductionElems,
    /// Nonterminal `ProductionElem`.
    ProductionElem,
    /// Nonterminal `Config`.
    Config,
}
/// The generated LR(1) parser definition.
#[derive(Debug, Default)]
pub struct ParserDef {
    _p: (),
}
impl lelele::ParserDef for ParserDef {
    type StateIndex = NodeID;
    type TerminalIndex = TokenID;
    type NonterminalIndex = Symbol;
    #[inline]
    fn initial_state(&self) -> Self::StateIndex {
        NodeID::N0
    }
    #[inline]
    fn action(
        &self,
        current: Self::StateIndex,
        lookahead: lelele::Terminal<Self::TerminalIndex>,
    ) -> lelele::ParseAction<Self> {
        __action(current, lookahead)
    }
    #[inline]
    fn goto(&self, current: Self::StateIndex, symbol: Self::NonterminalIndex) -> Self::StateIndex {
        __goto(current, symbol).unwrap()
    }
    #[inline]
    fn expected_terminals(
        &self,
        current: Self::StateIndex,
    ) -> &[lelele::Terminal<Self::TerminalIndex>] {
        __expected_terminals(current)
    }
}
#[allow(unreachable_patterns)]
const fn __action(
    current: NodeID,
    lookahead: lelele::Terminal<TokenID>,
) -> lelele::ParseAction<ParserDef> {
    match current {
        NodeID::N0 => match lookahead {
            lelele::Terminal::EOI => lelele::Reduce(Symbol::Stmts, 0),
            lelele::Terminal::T(TokenID::KW_TERMINAL) => lelele::Reduce(Symbol::Stmts, 0),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL) => lelele::Reduce(Symbol::Stmts, 0),
            lelele::Terminal::T(TokenID::KW_START) => lelele::Reduce(Symbol::Stmts, 0),
            lelele::Terminal::T(TokenID::KW_RULE) => lelele::Reduce(Symbol::Stmts, 0),
            lelele::Terminal::T(TokenID::KW_PREC) => lelele::Reduce(Symbol::Stmts, 0),
            _ => lelele::Fail,
        },
        NodeID::N1 => match lookahead {
            lelele::Terminal::EOI => lelele::Accept,
            _ => lelele::Fail,
        },
        NodeID::N2 => match lookahead {
            lelele::Terminal::T(TokenID::KW_TERMINAL) => lelele::Shift(NodeID::N5),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL) => lelele::Shift(NodeID::N6),
            lelele::Terminal::T(TokenID::KW_RULE) => lelele::Shift(NodeID::N7),
            lelele::Terminal::T(TokenID::KW_START) => lelele::Shift(NodeID::N8),
            lelele::Terminal::T(TokenID::KW_PREC) => lelele::Shift(NodeID::N9),
            lelele::Terminal::EOI => lelele::Reduce(Symbol::Grammar, 1),
            _ => lelele::Fail,
        },
        NodeID::N3 => match lookahead {
            _ => lelele::Fail,
        },
        NodeID::N4 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Shift(NodeID::N10),
            _ => lelele::Fail,
        },
        NodeID::N5 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N12),
            lelele::Terminal::T(TokenID::LBRACKET) => lelele::Shift(NodeID::N13),
            _ => lelele::Fail,
        },
        NodeID::N6 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N12),
            _ => lelele::Fail,
        },
        NodeID::N7 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N15),
            _ => lelele::Fail,
        },
        NodeID::N8 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N16),
            _ => lelele::Fail,
        },
        NodeID::N9 => match lookahead {
            lelele::Terminal::T(TokenID::LBRACKET) => lelele::Shift(NodeID::N17),
            _ => lelele::Fail,
        },
        NodeID::N10 => match lookahead {
            lelele::Terminal::EOI => lelele::Reduce(Symbol::Stmts, 3),
            lelele::Terminal::T(TokenID::KW_TERMINAL) => lelele::Reduce(Symbol::Stmts, 3),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL) => lelele::Reduce(Symbol::Stmts, 3),
            lelele::Terminal::T(TokenID::KW_START) => lelele::Reduce(Symbol::Stmts, 3),
            lelele::Terminal::T(TokenID::KW_RULE) => lelele::Reduce(Symbol::Stmts, 3),
            lelele::Terminal::T(TokenID::KW_PREC) => lelele::Reduce(Symbol::Stmts, 3),
            _ => lelele::Fail,
        },
        NodeID::N11 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Stmt, 2),
            _ => lelele::Fail,
        },
        NodeID::N12 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N12),
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Idents, 1),
            _ => lelele::Fail,
        },
        NodeID::N13 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N21),
            _ => lelele::Fail,
        },
        NodeID::N14 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Stmt, 2),
            _ => lelele::Fail,
        },
        NodeID::N15 => match lookahead {
            lelele::Terminal::T(TokenID::COLON_EQ) => lelele::Shift(NodeID::N22),
            _ => lelele::Fail,
        },
        NodeID::N16 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Stmt, 2),
            _ => lelele::Fail,
        },
        NodeID::N17 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N21),
            _ => lelele::Fail,
        },
        NodeID::N18 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Idents, 2),
            _ => lelele::Fail,
        },
        NodeID::N19 => match lookahead {
            lelele::Terminal::T(TokenID::RBRACKET) => lelele::Shift(NodeID::N24),
            _ => lelele::Fail,
        },
        NodeID::N20 => match lookahead {
            lelele::Terminal::T(TokenID::COMMA) => lelele::Shift(NodeID::N25),
            lelele::Terminal::T(TokenID::RBRACKET) => lelele::Reduce(Symbol::Configs, 1),
            _ => lelele::Fail,
        },
        NodeID::N21 => match lookahead {
            lelele::Terminal::T(TokenID::EQ) => lelele::Shift(NodeID::N26),
            _ => lelele::Fail,
        },
        NodeID::N22 => match lookahead {
            lelele::Terminal::T(TokenID::KW_EMPTY) => lelele::Shift(NodeID::N29),
            lelele::Terminal::T(TokenID::AT_LBRACKET) => lelele::Shift(NodeID::N31),
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N33),
            lelele::Terminal::T(TokenID::KW_ERROR) => lelele::Shift(NodeID::N34),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Shift(NodeID::N35),
            _ => lelele::Fail,
        },
        NodeID::N23 => match lookahead {
            lelele::Terminal::T(TokenID::RBRACKET) => lelele::Shift(NodeID::N36),
            _ => lelele::Fail,
        },
        NodeID::N24 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N12),
            _ => lelele::Fail,
        },
        NodeID::N25 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N21),
            lelele::Terminal::T(TokenID::RBRACKET) => lelele::Reduce(Symbol::Configs, 2),
            _ => lelele::Fail,
        },
        NodeID::N26 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N39),
            _ => lelele::Fail,
        },
        NodeID::N27 => match lookahead {
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Shift(NodeID::N40),
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Stmt, 4),
            _ => lelele::Fail,
        },
        NodeID::N28 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Productions, 1),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::Productions, 1),
            _ => lelele::Fail,
        },
        NodeID::N29 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Production, 1),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::Production, 1),
            _ => lelele::Fail,
        },
        NodeID::N30 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Production, 1),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::Production, 1),
            _ => lelele::Fail,
        },
        NodeID::N31 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N21),
            _ => lelele::Fail,
        },
        NodeID::N32 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N33),
            lelele::Terminal::T(TokenID::KW_ERROR) => lelele::Shift(NodeID::N34),
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::ProductionElems, 1),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::ProductionElems, 1),
            _ => lelele::Fail,
        },
        NodeID::N33 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::ProductionElem, 1),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::ProductionElem, 1),
            lelele::Terminal::T(TokenID::KW_ERROR) => lelele::Reduce(Symbol::ProductionElem, 1),
            lelele::Terminal::T(TokenID::IDENT) => lelele::Reduce(Symbol::ProductionElem, 1),
            _ => lelele::Fail,
        },
        NodeID::N34 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::ProductionElem, 1),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::ProductionElem, 1),
            lelele::Terminal::T(TokenID::KW_ERROR) => lelele::Reduce(Symbol::ProductionElem, 1),
            lelele::Terminal::T(TokenID::IDENT) => lelele::Reduce(Symbol::ProductionElem, 1),
            _ => lelele::Fail,
        },
        NodeID::N35 => match lookahead {
            lelele::Terminal::T(TokenID::KW_EMPTY) => lelele::Shift(NodeID::N29),
            lelele::Terminal::T(TokenID::AT_LBRACKET) => lelele::Shift(NodeID::N31),
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N33),
            lelele::Terminal::T(TokenID::KW_ERROR) => lelele::Shift(NodeID::N34),
            _ => lelele::Fail,
        },
        NodeID::N36 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N44),
            _ => lelele::Fail,
        },
        NodeID::N37 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Stmt, 5),
            _ => lelele::Fail,
        },
        NodeID::N38 => match lookahead {
            lelele::Terminal::T(TokenID::RBRACKET) => lelele::Reduce(Symbol::Configs, 3),
            _ => lelele::Fail,
        },
        NodeID::N39 => match lookahead {
            lelele::Terminal::T(TokenID::RBRACKET) => lelele::Reduce(Symbol::Config, 3),
            lelele::Terminal::T(TokenID::COMMA) => lelele::Reduce(Symbol::Config, 3),
            _ => lelele::Fail,
        },
        NodeID::N40 => match lookahead {
            lelele::Terminal::T(TokenID::KW_EMPTY) => lelele::Shift(NodeID::N29),
            lelele::Terminal::T(TokenID::AT_LBRACKET) => lelele::Shift(NodeID::N31),
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N33),
            lelele::Terminal::T(TokenID::KW_ERROR) => lelele::Shift(NodeID::N34),
            _ => lelele::Fail,
        },
        NodeID::N41 => match lookahead {
            lelele::Terminal::T(TokenID::RBRACKET) => lelele::Shift(NodeID::N46),
            _ => lelele::Fail,
        },
        NodeID::N42 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::ProductionElems, 2),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::ProductionElems, 2),
            _ => lelele::Fail,
        },
        NodeID::N43 => match lookahead {
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Shift(NodeID::N40),
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Stmt, 5),
            _ => lelele::Fail,
        },
        NodeID::N44 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Stmt, 5),
            _ => lelele::Fail,
        },
        NodeID::N45 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Productions, 3),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::Productions, 3),
            _ => lelele::Fail,
        },
        NodeID::N46 => match lookahead {
            lelele::Terminal::T(TokenID::IDENT) => lelele::Shift(NodeID::N33),
            lelele::Terminal::T(TokenID::KW_ERROR) => lelele::Shift(NodeID::N34),
            _ => lelele::Fail,
        },
        NodeID::N47 => match lookahead {
            lelele::Terminal::T(TokenID::SEMICOLON) => lelele::Reduce(Symbol::Production, 4),
            lelele::Terminal::T(TokenID::VERT_BAR) => lelele::Reduce(Symbol::Production, 4),
            _ => lelele::Fail,
        },
    }
}
const fn __expected_terminals(current: NodeID) -> &'static [lelele::Terminal<TokenID>] {
    match current {
        NodeID::N0 => &[
            lelele::Terminal::EOI,
            lelele::Terminal::T(TokenID::KW_TERMINAL),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL),
            lelele::Terminal::T(TokenID::KW_START),
            lelele::Terminal::T(TokenID::KW_RULE),
            lelele::Terminal::T(TokenID::KW_PREC),
        ],
        NodeID::N1 => &[lelele::Terminal::EOI],
        NodeID::N2 => &[
            lelele::Terminal::T(TokenID::KW_TERMINAL),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL),
            lelele::Terminal::T(TokenID::KW_RULE),
            lelele::Terminal::T(TokenID::KW_START),
            lelele::Terminal::T(TokenID::KW_PREC),
            lelele::Terminal::EOI,
        ],
        NodeID::N3 => &[],
        NodeID::N4 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N5 => &[
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::LBRACKET),
        ],
        NodeID::N6 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N7 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N8 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N9 => &[lelele::Terminal::T(TokenID::LBRACKET)],
        NodeID::N10 => &[
            lelele::Terminal::EOI,
            lelele::Terminal::T(TokenID::KW_TERMINAL),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL),
            lelele::Terminal::T(TokenID::KW_START),
            lelele::Terminal::T(TokenID::KW_RULE),
            lelele::Terminal::T(TokenID::KW_PREC),
        ],
        NodeID::N11 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N12 => &[
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::SEMICOLON),
        ],
        NodeID::N13 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N14 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N15 => &[lelele::Terminal::T(TokenID::COLON_EQ)],
        NodeID::N16 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N17 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N18 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N19 => &[lelele::Terminal::T(TokenID::RBRACKET)],
        NodeID::N20 => &[
            lelele::Terminal::T(TokenID::COMMA),
            lelele::Terminal::T(TokenID::RBRACKET),
        ],
        NodeID::N21 => &[lelele::Terminal::T(TokenID::EQ)],
        NodeID::N22 => &[
            lelele::Terminal::T(TokenID::KW_EMPTY),
            lelele::Terminal::T(TokenID::AT_LBRACKET),
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::KW_ERROR),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N23 => &[lelele::Terminal::T(TokenID::RBRACKET)],
        NodeID::N24 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N25 => &[
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::RBRACKET),
        ],
        NodeID::N26 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N27 => &[
            lelele::Terminal::T(TokenID::VERT_BAR),
            lelele::Terminal::T(TokenID::SEMICOLON),
        ],
        NodeID::N28 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N29 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N30 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N31 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N32 => &[
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::KW_ERROR),
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N33 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
            lelele::Terminal::T(TokenID::KW_ERROR),
            lelele::Terminal::T(TokenID::IDENT),
        ],
        NodeID::N34 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
            lelele::Terminal::T(TokenID::KW_ERROR),
            lelele::Terminal::T(TokenID::IDENT),
        ],
        NodeID::N35 => &[
            lelele::Terminal::T(TokenID::KW_EMPTY),
            lelele::Terminal::T(TokenID::AT_LBRACKET),
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::KW_ERROR),
        ],
        NodeID::N36 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N37 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N38 => &[lelele::Terminal::T(TokenID::RBRACKET)],
        NodeID::N39 => &[
            lelele::Terminal::T(TokenID::RBRACKET),
            lelele::Terminal::T(TokenID::COMMA),
        ],
        NodeID::N40 => &[
            lelele::Terminal::T(TokenID::KW_EMPTY),
            lelele::Terminal::T(TokenID::AT_LBRACKET),
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::KW_ERROR),
        ],
        NodeID::N41 => &[lelele::Terminal::T(TokenID::RBRACKET)],
        NodeID::N42 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N43 => &[
            lelele::Terminal::T(TokenID::VERT_BAR),
            lelele::Terminal::T(TokenID::SEMICOLON),
        ],
        NodeID::N44 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N45 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N46 => &[
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::KW_ERROR),
        ],
        NodeID::N47 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
    }
}
#[allow(unreachable_patterns)]
const fn __goto(current: NodeID, symbol: Symbol) -> Option<NodeID> {
    match current {
        NodeID::N0 => match symbol {
            Symbol::Grammar => Some(NodeID::N1),
            Symbol::Stmts => Some(NodeID::N2),
            _ => None,
        },
        NodeID::N2 => match symbol {
            Symbol::Stmt => Some(NodeID::N4),
            _ => None,
        },
        NodeID::N5 => match symbol {
            Symbol::Idents => Some(NodeID::N11),
            _ => None,
        },
        NodeID::N6 => match symbol {
            Symbol::Idents => Some(NodeID::N14),
            _ => None,
        },
        NodeID::N12 => match symbol {
            Symbol::Idents => Some(NodeID::N18),
            _ => None,
        },
        NodeID::N13 => match symbol {
            Symbol::Configs => Some(NodeID::N19),
            Symbol::Config => Some(NodeID::N20),
            _ => None,
        },
        NodeID::N17 => match symbol {
            Symbol::Configs => Some(NodeID::N23),
            Symbol::Config => Some(NodeID::N20),
            _ => None,
        },
        NodeID::N22 => match symbol {
            Symbol::Productions => Some(NodeID::N27),
            Symbol::Production => Some(NodeID::N28),
            Symbol::ProductionElems => Some(NodeID::N30),
            Symbol::ProductionElem => Some(NodeID::N32),
            _ => None,
        },
        NodeID::N24 => match symbol {
            Symbol::Idents => Some(NodeID::N37),
            _ => None,
        },
        NodeID::N25 => match symbol {
            Symbol::Configs => Some(NodeID::N38),
            Symbol::Config => Some(NodeID::N20),
            _ => None,
        },
        NodeID::N31 => match symbol {
            Symbol::Configs => Some(NodeID::N41),
            Symbol::Config => Some(NodeID::N20),
            _ => None,
        },
        NodeID::N32 => match symbol {
            Symbol::ProductionElems => Some(NodeID::N42),
            Symbol::ProductionElem => Some(NodeID::N32),
            _ => None,
        },
        NodeID::N35 => match symbol {
            Symbol::Productions => Some(NodeID::N43),
            Symbol::Production => Some(NodeID::N28),
            Symbol::ProductionElems => Some(NodeID::N30),
            Symbol::ProductionElem => Some(NodeID::N32),
            _ => None,
        },
        NodeID::N40 => match symbol {
            Symbol::Production => Some(NodeID::N45),
            Symbol::ProductionElems => Some(NodeID::N30),
            Symbol::ProductionElem => Some(NodeID::N32),
            _ => None,
        },
        NodeID::N46 => match symbol {
            Symbol::ProductionElems => Some(NodeID::N47),
            Symbol::ProductionElem => Some(NodeID::N32),
            _ => None,
        },
        _ => None,
    }
}
