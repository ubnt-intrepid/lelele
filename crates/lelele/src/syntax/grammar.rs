// This file is automatically generated by lelele.
use lelele_runtime::_private as lelele;
/// The type to identify DFA state nodes.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum NodeID {
    N0,
    N1,
    N2,
    N3,
    N4,
    N5,
    N6,
    N7,
    N8,
    N9,
    N10,
    N11,
    N12,
    N13,
    N14,
    N15,
    N16,
    N17,
    N18,
    N19,
    N20,
    N21,
    N22,
    N23,
    N24,
    N25,
    N26,
    N27,
    N28,
    N29,
    N30,
    N31,
    N32,
    N33,
    N34,
    N35,
    N36,
    N37,
    N38,
    N39,
    N40,
    N41,
    N42,
    N43,
    N44,
    N45,
}
/// The type to identify terminal or nonterminal symbols used in generated DFA.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[allow(non_camel_case_types)]
pub enum TokenID {
    /// Terminal `LBRACKET`.
    LBRACKET,
    /// Terminal `RBRACKET`.
    RBRACKET,
    /// Terminal `AT_LBRACKET`.
    AT_LBRACKET,
    /// Terminal `COLON_EQ`.
    COLON_EQ,
    /// Terminal `EQ`.
    EQ,
    /// Terminal `COMMA`.
    COMMA,
    /// Terminal `SEMICOLON`.
    SEMICOLON,
    /// Terminal `VERT_BAR`.
    VERT_BAR,
    /// Terminal `KW_TERMINAL`.
    KW_TERMINAL,
    /// Terminal `KW_NONTERMINAL`.
    KW_NONTERMINAL,
    /// Terminal `KW_START`.
    KW_START,
    /// Terminal `KW_RULE`.
    KW_RULE,
    /// Terminal `KW_PREC`.
    KW_PREC,
    /// Terminal `KW_EMPTY`.
    KW_EMPTY,
    /// Terminal `IDENT`.
    IDENT,
}
impl lelele::Token<TokenID> for TokenID {
    #[inline]
    fn to_index(&self) -> TokenID {
        *self
    }
}
/// The type to identify nonterminal symbols used in generated DFA.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Symbol {
    /// Nonterminal `Grammar`.
    Grammar,
    /// Nonterminal `Stmts`.
    Stmts,
    /// Nonterminal `Stmt`.
    Stmt,
    /// Nonterminal `Productions`.
    Productions,
    /// Nonterminal `Production`.
    Production,
    /// Nonterminal `Configs`.
    Configs,
    /// Nonterminal `Config`.
    Config,
    /// Nonterminal `Idents`.
    Idents,
    /// Nonterminal `Elems`.
    Elems,
}
/// The generated LR(1) parser definition.
#[derive(Debug, Default)]
pub struct ParserDef {
    _p: (),
}
impl lelele::ParserDef for ParserDef {
    type StateIndex = NodeID;
    type TerminalIndex = TokenID;
    type NonterminalIndex = Symbol;
    #[inline]
    fn initial_state(&self) -> Self::StateIndex {
        NodeID::N0
    }
    #[inline]
    fn action<TAction>(
        &self,
        current: Self::StateIndex,
        lookahead: Option<Self::TerminalIndex>,
        action: TAction,
    ) -> Result<TAction::Ok, TAction::Error>
    where
        TAction: lelele::ParseAction<
            StateIndex = Self::StateIndex,
            TerminalIndex = Self::TerminalIndex,
            NonterminalIndex = Self::NonterminalIndex,
        >,
    {
        match __action(current, lookahead) {
            Some(SimulatedAction::Shift(next)) => action.shift(next),
            Some(SimulatedAction::Reduce(symbol, n)) => action.reduce(symbol, n),
            Some(SimulatedAction::Accept) => action.accept(),
            None => action.fail(),
        }
    }
    #[inline]
    fn goto(&self, current: Self::StateIndex, symbol: Self::NonterminalIndex) -> Self::StateIndex {
        __goto(current, symbol).unwrap()
    }
    #[inline]
    fn expected_terminals(
        &self,
        current: Self::StateIndex,
    ) -> &[lelele::Terminal<Self::TerminalIndex>] {
        __expected_terminals(current)
    }
}
enum SimulatedAction {
    Shift(NodeID),
    Reduce(Symbol, usize),
    Accept,
}
#[allow(unreachable_patterns)]
const fn __action(current: NodeID, lookahead: Option<TokenID>) -> Option<SimulatedAction> {
    match current {
        NodeID::N0 => match lookahead {
            None => Some(SimulatedAction::Reduce(Symbol::Stmts, 0)),
            Some(TokenID::KW_TERMINAL) => Some(SimulatedAction::Reduce(Symbol::Stmts, 0)),
            Some(TokenID::KW_NONTERMINAL) => Some(SimulatedAction::Reduce(Symbol::Stmts, 0)),
            Some(TokenID::KW_RULE) => Some(SimulatedAction::Reduce(Symbol::Stmts, 0)),
            Some(TokenID::KW_START) => Some(SimulatedAction::Reduce(Symbol::Stmts, 0)),
            Some(TokenID::KW_PREC) => Some(SimulatedAction::Reduce(Symbol::Stmts, 0)),
            _ => None,
        },
        NodeID::N1 => match lookahead {
            None => Some(SimulatedAction::Accept),
            _ => None,
        },
        NodeID::N2 => match lookahead {
            Some(TokenID::KW_TERMINAL) => Some(SimulatedAction::Shift(NodeID::N4)),
            Some(TokenID::KW_NONTERMINAL) => Some(SimulatedAction::Shift(NodeID::N5)),
            Some(TokenID::KW_RULE) => Some(SimulatedAction::Shift(NodeID::N6)),
            Some(TokenID::KW_START) => Some(SimulatedAction::Shift(NodeID::N7)),
            Some(TokenID::KW_PREC) => Some(SimulatedAction::Shift(NodeID::N8)),
            None => Some(SimulatedAction::Reduce(Symbol::Grammar, 1)),
            _ => None,
        },
        NodeID::N3 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Shift(NodeID::N9)),
            _ => None,
        },
        NodeID::N4 => match lookahead {
            Some(TokenID::LBRACKET) => Some(SimulatedAction::Shift(NodeID::N11)),
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N12)),
            _ => None,
        },
        NodeID::N5 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N12)),
            _ => None,
        },
        NodeID::N6 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N14)),
            _ => None,
        },
        NodeID::N7 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N15)),
            _ => None,
        },
        NodeID::N8 => match lookahead {
            Some(TokenID::LBRACKET) => Some(SimulatedAction::Shift(NodeID::N16)),
            _ => None,
        },
        NodeID::N9 => match lookahead {
            None => Some(SimulatedAction::Reduce(Symbol::Stmts, 3)),
            Some(TokenID::KW_TERMINAL) => Some(SimulatedAction::Reduce(Symbol::Stmts, 3)),
            Some(TokenID::KW_NONTERMINAL) => Some(SimulatedAction::Reduce(Symbol::Stmts, 3)),
            Some(TokenID::KW_RULE) => Some(SimulatedAction::Reduce(Symbol::Stmts, 3)),
            Some(TokenID::KW_START) => Some(SimulatedAction::Reduce(Symbol::Stmts, 3)),
            Some(TokenID::KW_PREC) => Some(SimulatedAction::Reduce(Symbol::Stmts, 3)),
            _ => None,
        },
        NodeID::N10 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Stmt, 2)),
            _ => None,
        },
        NodeID::N11 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N19)),
            _ => None,
        },
        NodeID::N12 => match lookahead {
            Some(TokenID::COMMA) => Some(SimulatedAction::Shift(NodeID::N20)),
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Idents, 1)),
            _ => None,
        },
        NodeID::N13 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Stmt, 2)),
            _ => None,
        },
        NodeID::N14 => match lookahead {
            Some(TokenID::COLON_EQ) => Some(SimulatedAction::Shift(NodeID::N21)),
            _ => None,
        },
        NodeID::N15 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Stmt, 2)),
            _ => None,
        },
        NodeID::N16 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N19)),
            _ => None,
        },
        NodeID::N17 => match lookahead {
            Some(TokenID::RBRACKET) => Some(SimulatedAction::Shift(NodeID::N23)),
            _ => None,
        },
        NodeID::N18 => match lookahead {
            Some(TokenID::COMMA) => Some(SimulatedAction::Shift(NodeID::N24)),
            Some(TokenID::RBRACKET) => Some(SimulatedAction::Reduce(Symbol::Configs, 1)),
            _ => None,
        },
        NodeID::N19 => match lookahead {
            Some(TokenID::EQ) => Some(SimulatedAction::Shift(NodeID::N25)),
            _ => None,
        },
        NodeID::N20 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N12)),
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Idents, 2)),
            _ => None,
        },
        NodeID::N21 => match lookahead {
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Shift(NodeID::N28)),
            Some(TokenID::KW_EMPTY) => Some(SimulatedAction::Shift(NodeID::N30)),
            Some(TokenID::AT_LBRACKET) => Some(SimulatedAction::Shift(NodeID::N32)),
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N33)),
            _ => None,
        },
        NodeID::N22 => match lookahead {
            Some(TokenID::RBRACKET) => Some(SimulatedAction::Shift(NodeID::N34)),
            _ => None,
        },
        NodeID::N23 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N12)),
            _ => None,
        },
        NodeID::N24 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N19)),
            Some(TokenID::RBRACKET) => Some(SimulatedAction::Reduce(Symbol::Configs, 2)),
            _ => None,
        },
        NodeID::N25 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N37)),
            _ => None,
        },
        NodeID::N26 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Idents, 3)),
            _ => None,
        },
        NodeID::N27 => match lookahead {
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Shift(NodeID::N38)),
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Stmt, 4)),
            _ => None,
        },
        NodeID::N28 => match lookahead {
            Some(TokenID::KW_EMPTY) => Some(SimulatedAction::Shift(NodeID::N30)),
            Some(TokenID::AT_LBRACKET) => Some(SimulatedAction::Shift(NodeID::N32)),
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N33)),
            _ => None,
        },
        NodeID::N29 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Productions, 1)),
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Reduce(Symbol::Productions, 1)),
            _ => None,
        },
        NodeID::N30 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Production, 1)),
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Reduce(Symbol::Production, 1)),
            _ => None,
        },
        NodeID::N31 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Production, 1)),
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Reduce(Symbol::Production, 1)),
            _ => None,
        },
        NodeID::N32 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N19)),
            _ => None,
        },
        NodeID::N33 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N33)),
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Elems, 1)),
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Reduce(Symbol::Elems, 1)),
            _ => None,
        },
        NodeID::N34 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N42)),
            _ => None,
        },
        NodeID::N35 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Stmt, 5)),
            _ => None,
        },
        NodeID::N36 => match lookahead {
            Some(TokenID::RBRACKET) => Some(SimulatedAction::Reduce(Symbol::Configs, 3)),
            _ => None,
        },
        NodeID::N37 => match lookahead {
            Some(TokenID::RBRACKET) => Some(SimulatedAction::Reduce(Symbol::Config, 3)),
            Some(TokenID::COMMA) => Some(SimulatedAction::Reduce(Symbol::Config, 3)),
            _ => None,
        },
        NodeID::N38 => match lookahead {
            Some(TokenID::KW_EMPTY) => Some(SimulatedAction::Shift(NodeID::N30)),
            Some(TokenID::AT_LBRACKET) => Some(SimulatedAction::Shift(NodeID::N32)),
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N33)),
            _ => None,
        },
        NodeID::N39 => match lookahead {
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Shift(NodeID::N38)),
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Stmt, 5)),
            _ => None,
        },
        NodeID::N40 => match lookahead {
            Some(TokenID::RBRACKET) => Some(SimulatedAction::Shift(NodeID::N44)),
            _ => None,
        },
        NodeID::N41 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Elems, 2)),
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Reduce(Symbol::Elems, 2)),
            _ => None,
        },
        NodeID::N42 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Stmt, 5)),
            _ => None,
        },
        NodeID::N43 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Productions, 3)),
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Reduce(Symbol::Productions, 3)),
            _ => None,
        },
        NodeID::N44 => match lookahead {
            Some(TokenID::IDENT) => Some(SimulatedAction::Shift(NodeID::N33)),
            _ => None,
        },
        NodeID::N45 => match lookahead {
            Some(TokenID::SEMICOLON) => Some(SimulatedAction::Reduce(Symbol::Production, 4)),
            Some(TokenID::VERT_BAR) => Some(SimulatedAction::Reduce(Symbol::Production, 4)),
            _ => None,
        },
    }
}
const fn __expected_terminals(current: NodeID) -> &'static [lelele::Terminal<TokenID>] {
    match current {
        NodeID::N0 => &[
            lelele::Terminal::EOI,
            lelele::Terminal::T(TokenID::KW_TERMINAL),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL),
            lelele::Terminal::T(TokenID::KW_RULE),
            lelele::Terminal::T(TokenID::KW_START),
            lelele::Terminal::T(TokenID::KW_PREC),
        ],
        NodeID::N1 => &[lelele::Terminal::EOI],
        NodeID::N2 => &[
            lelele::Terminal::T(TokenID::KW_TERMINAL),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL),
            lelele::Terminal::T(TokenID::KW_RULE),
            lelele::Terminal::T(TokenID::KW_START),
            lelele::Terminal::T(TokenID::KW_PREC),
            lelele::Terminal::EOI,
        ],
        NodeID::N3 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N4 => &[
            lelele::Terminal::T(TokenID::LBRACKET),
            lelele::Terminal::T(TokenID::IDENT),
        ],
        NodeID::N5 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N6 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N7 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N8 => &[lelele::Terminal::T(TokenID::LBRACKET)],
        NodeID::N9 => &[
            lelele::Terminal::EOI,
            lelele::Terminal::T(TokenID::KW_TERMINAL),
            lelele::Terminal::T(TokenID::KW_NONTERMINAL),
            lelele::Terminal::T(TokenID::KW_RULE),
            lelele::Terminal::T(TokenID::KW_START),
            lelele::Terminal::T(TokenID::KW_PREC),
        ],
        NodeID::N10 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N11 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N12 => &[
            lelele::Terminal::T(TokenID::COMMA),
            lelele::Terminal::T(TokenID::SEMICOLON),
        ],
        NodeID::N13 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N14 => &[lelele::Terminal::T(TokenID::COLON_EQ)],
        NodeID::N15 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N16 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N17 => &[lelele::Terminal::T(TokenID::RBRACKET)],
        NodeID::N18 => &[
            lelele::Terminal::T(TokenID::COMMA),
            lelele::Terminal::T(TokenID::RBRACKET),
        ],
        NodeID::N19 => &[lelele::Terminal::T(TokenID::EQ)],
        NodeID::N20 => &[
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::SEMICOLON),
        ],
        NodeID::N21 => &[
            lelele::Terminal::T(TokenID::VERT_BAR),
            lelele::Terminal::T(TokenID::KW_EMPTY),
            lelele::Terminal::T(TokenID::AT_LBRACKET),
            lelele::Terminal::T(TokenID::IDENT),
        ],
        NodeID::N22 => &[lelele::Terminal::T(TokenID::RBRACKET)],
        NodeID::N23 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N24 => &[
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::RBRACKET),
        ],
        NodeID::N25 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N26 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N27 => &[
            lelele::Terminal::T(TokenID::VERT_BAR),
            lelele::Terminal::T(TokenID::SEMICOLON),
        ],
        NodeID::N28 => &[
            lelele::Terminal::T(TokenID::KW_EMPTY),
            lelele::Terminal::T(TokenID::AT_LBRACKET),
            lelele::Terminal::T(TokenID::IDENT),
        ],
        NodeID::N29 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N30 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N31 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N32 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N33 => &[
            lelele::Terminal::T(TokenID::IDENT),
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N34 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N35 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N36 => &[lelele::Terminal::T(TokenID::RBRACKET)],
        NodeID::N37 => &[
            lelele::Terminal::T(TokenID::RBRACKET),
            lelele::Terminal::T(TokenID::COMMA),
        ],
        NodeID::N38 => &[
            lelele::Terminal::T(TokenID::KW_EMPTY),
            lelele::Terminal::T(TokenID::AT_LBRACKET),
            lelele::Terminal::T(TokenID::IDENT),
        ],
        NodeID::N39 => &[
            lelele::Terminal::T(TokenID::VERT_BAR),
            lelele::Terminal::T(TokenID::SEMICOLON),
        ],
        NodeID::N40 => &[lelele::Terminal::T(TokenID::RBRACKET)],
        NodeID::N41 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N42 => &[lelele::Terminal::T(TokenID::SEMICOLON)],
        NodeID::N43 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
        NodeID::N44 => &[lelele::Terminal::T(TokenID::IDENT)],
        NodeID::N45 => &[
            lelele::Terminal::T(TokenID::SEMICOLON),
            lelele::Terminal::T(TokenID::VERT_BAR),
        ],
    }
}
#[allow(unreachable_patterns)]
const fn __goto(current: NodeID, symbol: Symbol) -> Option<NodeID> {
    match current {
        NodeID::N0 => match symbol {
            Symbol::Grammar => Some(NodeID::N1),
            Symbol::Stmts => Some(NodeID::N2),
            _ => None,
        },
        NodeID::N2 => match symbol {
            Symbol::Stmt => Some(NodeID::N3),
            _ => None,
        },
        NodeID::N4 => match symbol {
            Symbol::Idents => Some(NodeID::N10),
            _ => None,
        },
        NodeID::N5 => match symbol {
            Symbol::Idents => Some(NodeID::N13),
            _ => None,
        },
        NodeID::N11 => match symbol {
            Symbol::Configs => Some(NodeID::N17),
            Symbol::Config => Some(NodeID::N18),
            _ => None,
        },
        NodeID::N16 => match symbol {
            Symbol::Configs => Some(NodeID::N22),
            Symbol::Config => Some(NodeID::N18),
            _ => None,
        },
        NodeID::N20 => match symbol {
            Symbol::Idents => Some(NodeID::N26),
            _ => None,
        },
        NodeID::N21 => match symbol {
            Symbol::Productions => Some(NodeID::N27),
            Symbol::Production => Some(NodeID::N29),
            Symbol::Elems => Some(NodeID::N31),
            _ => None,
        },
        NodeID::N23 => match symbol {
            Symbol::Idents => Some(NodeID::N35),
            _ => None,
        },
        NodeID::N24 => match symbol {
            Symbol::Config => Some(NodeID::N18),
            Symbol::Configs => Some(NodeID::N36),
            _ => None,
        },
        NodeID::N28 => match symbol {
            Symbol::Productions => Some(NodeID::N39),
            Symbol::Production => Some(NodeID::N29),
            Symbol::Elems => Some(NodeID::N31),
            _ => None,
        },
        NodeID::N32 => match symbol {
            Symbol::Configs => Some(NodeID::N40),
            Symbol::Config => Some(NodeID::N18),
            _ => None,
        },
        NodeID::N33 => match symbol {
            Symbol::Elems => Some(NodeID::N41),
            _ => None,
        },
        NodeID::N38 => match symbol {
            Symbol::Production => Some(NodeID::N43),
            Symbol::Elems => Some(NodeID::N31),
            _ => None,
        },
        NodeID::N44 => match symbol {
            Symbol::Elems => Some(NodeID::N45),
            _ => None,
        },
        _ => None,
    }
}
