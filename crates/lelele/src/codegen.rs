//! code generation.

use crate::{
    dfa::NodeID,
    grammar::{Grammar, SymbolID},
    parse_table::{ParseTable, ResolvedAction},
};
use std::fmt;

#[derive(Debug)]
pub struct Codegen<'g> {
    grammar: &'g Grammar,
    parse_table: &'g ParseTable,
}

impl<'g> Codegen<'g> {
    pub fn new(grammar: &'g Grammar, parse_table: &'g ParseTable) -> Self {
        Self {
            grammar,
            parse_table,
        }
    }

    fn fmt_preamble(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(
            "\
// This file is automatically generated by lelele.

use ::lelele_runtime::_private as lelele;

/// The alias to parser type using generated parser definition.
pub type Parser<TTok> = lelele::Parser<ParserDef, TTok>;

/// Create an instance of parser using generated definition.
pub fn parser<TTok>() -> Parser<TTok>
where
    TTok: lelele::Token<TokenID>,
{
    lelele::Parser::new(
        ParserDef::default()
    )
}
",
        )
    }

    fn fmt_node_id_def(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(
            "\
/// The type to identify DFA state nodes.
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
#[repr(transparent)]
pub struct NodeID { __raw: usize }
impl NodeID {\n",
        )?;

        writeln!(
            f,
            "    const __START: Self = Self {{ __raw: {} }};",
            NodeID::START
        )?;

        f.write_str("}\n")?;

        Ok(())
    }

    fn fmt_token_id_def(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(
            "\
/// The type to identify terminal or nonterminal symbols used in generated DFA.
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
#[repr(transparent)]
pub struct TokenID { __raw: u64 }
impl TokenID {\n",
        )?;

        writeln!(
            f,
            "const __EOI: Self = Self {{ __raw: {} }};",
            SymbolID::EOI.raw(),
        )?;

        for terminal in self.grammar.terminals() {
            let export_name = match terminal.export_name() {
                Some(name) => name,
                None => continue,
            };
            writeln!(
                f,
                "\
/// Terminal `{export_name}`
pub const {export_name}: Self = Self {{ __raw: {id} }};",
                export_name = export_name,
                id = terminal.id().raw(),
            )?;
        }

        f.write_str("}\n")?;

        Ok(())
    }

    fn fmt_symbol_id_def(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(
            "\
/// The type to identify nonterminal symbols used in generated DFA.
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
#[repr(transparent)]
pub struct SymbolID { __raw: u64 }
impl SymbolID {\n",
        )?;

        for symbol in self.grammar.nonterminals() {
            let export_name = match symbol.export_name() {
                Some(name) => name,
                None => continue,
            };
            writeln!(
                f,
                "\
/// Nonterminal `{export_name}`
pub const {export_name}: Self = Self {{ __raw: {id} }};",
                export_name = export_name,
                id = symbol.id().raw(),
            )?;
        }

        f.write_str("}\n")?;

        Ok(())
    }

    fn fmt_rule_id_def(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(
            "\
/// The type to identify the syntax rule that matched input sequence.
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
#[repr(transparent)]
pub struct RuleID { __raw: u64 }
impl RuleID {\n",
        )?;

        'rules: for rule in self.grammar.rules() {
            let export_name = match rule.export_name() {
                Some(name) => name,
                None => continue 'rules,
            };

            let comment_lhs = match rule.left().export_name() {
                Some(name) => name,
                None => continue 'rules,
            };

            let mut comment_rhs = String::new();
            for (i, s) in rule.right().iter().enumerate() {
                let name = match s.export_name() {
                    Some(name) => name,
                    None => continue 'rules,
                };
                if i > 0 {
                    comment_rhs += " ";
                }
                comment_rhs += name;
            }

            writeln!(f, "    /// `{} : {}`", comment_lhs, comment_rhs)?;
            writeln!(
                f,
                "    pub const {export_name}: Self = Self {{ __raw: {id} }};",
                export_name = export_name,
                id = rule.id().raw()
            )?;
        }

        f.write_str("}\n")?;

        Ok(())
    }

    fn fmt_parser_def(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(
            "\
#[allow(dead_code)]
enum ParseAction {
    Shift(NodeID),
    Reduce(RuleID, SymbolID, usize),
    Accept,
    Fail,
}
/// The generated LR(1) parse table.
#[derive(Default)]
pub struct ParserDef {
    _p: (),
}
impl lelele::ParserDef for ParserDef {
    type State = NodeID;
    type Token = TokenID;
    type Symbol = SymbolID;
    type Reduce = RuleID;
    #[inline]
    fn initial_state(&self) -> Self::State {
        NodeID::__START
    }
    #[inline]
    fn action<TAction>(
        &self,
        current: Self::State,
        lookahead: Option<Self::Token>,
        action: TAction,
    ) -> Result<TAction::Ok, TAction::Error>
    where
        TAction: lelele::ParseAction<
            State = Self::State,
            Token = Self::Token,
            Symbol = Self::Symbol,
            Reduce = Self::Reduce,
        >,
    {
        let lookahead = lookahead.unwrap_or(TokenID::__EOI).__raw;
        let actions = &PARSE_TABLE[current.__raw];
        match actions.get(&lookahead) {
            Some(ParseAction::Shift(n)) => action.shift(*n),
            Some(ParseAction::Reduce(r, s, i)) => action.reduce(*r, *s, *i),
            Some(ParseAction::Accept) => action.accept(),
            _ => action.fail(actions.keys().map(|key| TokenID { __raw: *key })),
        }
    }
    #[inline]
    fn goto(&self, current: Self::State, symbol: Self::Symbol) -> Self::State {
        *GOTO_TABLE[current.__raw].get(&symbol.__raw).unwrap()
    }
}
const PARSE_TABLE: &[ lelele::phf::Map<u64, ParseAction> ] = &[\n",
        )?;

        for (_, actions) in &self.parse_table.map {
            let mut actions_g = phf_codegen::Map::<u64>::new();
            actions_g.phf_path("lelele::phf");

            for (symbol, action) in actions {
                let action_g = match action {
                    ResolvedAction::Shift(n) => {
                        format!("ParseAction::Shift(NodeID {{ __raw: {} }})", n)
                    }
                    ResolvedAction::Reduce(rule) => {
                        format!(
                            "ParseAction::Reduce(RuleID {{ __raw: {} }}, SymbolID {{ __raw: {} }}, {})",
                            rule.id().raw(),
                            rule.left().id().raw(),
                            rule.right().len(),
                        )
                    }
                    ResolvedAction::Accept => "ParseAction::Accept".into(),
                    ResolvedAction::Fail => "ParseAction::Fail".into(),
                };
                actions_g.entry(symbol.id().raw(), &action_g);
            }

            writeln!(f, "{},", actions_g.build())?;
        }

        f.write_str(
            "];\n
const GOTO_TABLE: &[ lelele::phf::Map<u64, NodeID> ] = &[\n",
        )?;

        for (_, actions) in &self.parse_table.map {
            let mut actions_g = phf_codegen::Map::<u64>::new();
            actions_g.phf_path("lelele::phf");

            for (symbol, action) in actions.iter().filter(|(s, _)| !s.is_terminal()) {
                let action_g = match action {
                    ResolvedAction::Shift(n) => format!("NodeID {{ __raw: {} }}", n),
                    _ => unreachable!(),
                };
                actions_g.entry(symbol.id().raw(), &action_g);
            }

            writeln!(f, "{},", actions_g.build())?;
        }

        f.write_str("];\n")?;

        Ok(())
    }
}

impl<'g> fmt::Display for Codegen<'g> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        self.fmt_preamble(f)?;
        self.fmt_node_id_def(f)?;
        self.fmt_token_id_def(f)?;
        self.fmt_symbol_id_def(f)?;
        self.fmt_rule_id_def(f)?;
        self.fmt_parser_def(f)?;
        Ok(())
    }
}
